<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~   http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="jira" transports="https,http" statistics="disable" trace="disable"
       startOnLoad="true">
    <target>
        <inSequence onError="faultHandlerSeq">
            <property name="uri" expression="json-eval($.uri)"/>
            <property name="username" expression="json-eval($.username)"/>
            <property name="password" expression="json-eval($.password)"/>
            <property name="issueId" expression="json-eval($.issueId)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="project" expression="json-eval($.project)"/>
            <property name="description" expression="json-eval($.description)"/>
            <property name="leadUserName" expression="json-eval($.leadUserName)"/>
            <property name="assigneeType" expression="json-eval($.assigneeType)"/>
            <property name="componentId" expression="json-eval($.componentId)"/>
            <property name="issueUpdates" expression="json-eval($.issueUpdates)"/>
            <property name="commentId" expression="json-eval($.commentId)"/>
            <property name="expand" expression="json-eval($.expand)"/>
            <property name="issueIdOrKey" expression="json-eval($.issueIdOrKey)"/>
            <property name="subject" expression="json-eval($.subject)"/>
            <property name="textBody" expression="json-eval($.textBody)"/>
            <property name="htmlBody" expression="json-eval($.htmlBody)"/>
            <property name="toReporter" expression="json-eval($.toReporter)"/>
            <property name="toAssignee" expression="json-eval($.toAssignee)"/>
            <property name="toWatchers" expression="json-eval($.toWatchers)"/>
            <property name="toVoters" expression="json-eval($.toVoters)"/>
            <property name="toUsers" expression="json-eval($.toUsers)"/>
            <property name="toGroups" expression="json-eval($.toGroups)"/>
            <property name="restrictGroups" expression="json-eval($.restrictGroups)"/>
            <property name="restrictPermissions" expression="json-eval($.restrictPermissions)"/>
            <property name="attachmentId" expression="json-eval($.attachmentId)"/>
            <property name="query" expression="json-eval($.query)"/>
            <property name="exclude" expression="json-eval($.exclude)"/>
            <property name="maxResults" expression="json-eval($.maxResults)"/>
            <property name="isShowAvatar" expression="json-eval($.isShowAvatar)"/>
            <property name="typeName" expression="json-eval($.typeName)"/>
            <property name="inwardIssueKey" expression="json-eval($.inwardIssueKey)"/>
            <property name="outwardIssueKey" expression="json-eval($.outwardIssueKey)"/>
            <property name="commentBody" expression="json-eval($.commentBody)"/>
            <property name="commentVisibility" expression="json-eval($.commentVisibility)"/>
            <property name="linkId" expression="json-eval($.linkId)"/>
            <property name="projectIdOrKey" expression="json-eval($.projectIdOrKey)"/>
            <property name="visibleRole" expression="json-eval($.visibleRole)"/>
            <property name="comment" expression="json-eval($.comment)"/>
            <jira.init>
                <uri>{$ctx:uri}</uri>
                <username>{$ctx:username}</username>
                <password>{$ctx:password}</password>
            </jira.init>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:getWatchersForIssue">
                    <jira.getWatchersForIssue>
                        <issueId>{$ctx:issueId}</issueId>
                    </jira.getWatchersForIssue>
                </case>
                <case regex="urn:createComponent">
                    <jira.createComponent>
                        <name>{$ctx:name}</name>
                        <project>{$ctx:project}</project>
                        <description>{$ctx:description}</description>
                        <leadUserName>{$ctx:leadUserName}</leadUserName>
                        <assigneeType>{$ctx:assigneeType}</assigneeType>
                    </jira.createComponent>
                </case>
                <case regex="urn:getComponent">
                    <jira.getComponent>
                        <componentId>{$ctx:componentId}</componentId>
                    </jira.getComponent>
                </case>
                <case regex="urn:updateComponent">
                    <jira.updateComponent>
                        <componentId>{$ctx:componentId}</componentId>
                        <name>{$ctx:name}</name>
                        <description>{$ctx:description}</description>
                        <leadUserName>{$ctx:leadUserName}</leadUserName>
                        <assigneeType>{$ctx:assigneeType}</assigneeType>
                    </jira.updateComponent>
                </case>
                <case regex="urn:countComponentRelatedIssues">
                    <jira.countComponentRelatedIssues>
                        <componentId>{$ctx:componentId}</componentId>
                    </jira.countComponentRelatedIssues>
                </case>
                <case regex="urn:createBulkIssue">
                    <jira.createBulkIssue>
                        <issueUpdates>{$ctx:issueUpdates}</issueUpdates>
                    </jira.createBulkIssue>
                </case>
                <case regex="urn:getCommentById">
                    <jira.getCommentById>
                        <commentId>{$ctx:commentId}</commentId>
                        <expand>{$ctx:expand}</expand>
                        <issueIdOrKey>{$ctx:issueIdOrKey}</issueIdOrKey>
                    </jira.getCommentById>
                </case>
                <case regex="urn:assignIssueToUser">
                    <jira.assignIssueToUser>
                        <name>{$ctx:name}</name>
                        <issueIdOrKey>{$ctx:issueIdOrKey}</issueIdOrKey>
                    </jira.assignIssueToUser>
                </case>
                <case regex="urn:sendNotification">
                    <jira.sendNotification>
                        <subject>{$ctx:subject}</subject>
                        <issueIdOrKey>{$ctx:issueIdOrKey}</issueIdOrKey>
                        <textBody>{$ctx:textBody}</textBody>
                        <htmlBody>{$ctx:htmlBody}</htmlBody>
                        <toReporter>{$ctx:toReporter}</toReporter>
                        <toAssignee>{$ctx:toAssignee}</toAssignee>
                        <toWatchers>{$ctx:toWatchers}</toWatchers>
                        <toVoters>{$ctx:toVoters}</toVoters>
                        <toUsers>{$ctx:toUsers}</toUsers>
                        <toGroups>{$ctx:toGroups}</toGroups>
                        <restrictGroups>{$ctx:restrictGroups}</restrictGroups>
                        <restrictPermissions>{$ctx:restrictPermissions}</restrictPermissions>
                    </jira.sendNotification>
                </case>
                <case regex="urn:removeUserFromWatcherList">
                    <jira.removeUserFromWatcherList>
                        <name>{$ctx:name}</name>
                        <issueId>{$ctx:issueId}</issueId>
                    </jira.removeUserFromWatcherList>
                </case>
                <case regex="urn:createIssueLink">
                    <jira.createIssueLink>
                        <typeName>{$ctx:typeName}</typeName>
                        <inwardIssueKey>{$ctx:inwardIssueKey}</inwardIssueKey>
                        <outwardIssueKey>{$ctx:outwardIssueKey}</outwardIssueKey>
                        <commentBody>{$ctx:commentBody}</commentBody>
                        <commentVisibility>{$ctx:commentVisibility}</commentVisibility>
                    </jira.createIssueLink>
                </case>
                <case regex="urn:getIssueLinkById">
                    <jira.getIssueLinkById>
                        <linkId>{$ctx:linkId}</linkId>
                    </jira.getIssueLinkById>
                </case>
                <case regex="urn:listGroupUserPicker">
                    <jira.listGroupUserPicker>
                        <query>{$ctx:query}</query>
                        <maxResults>{$ctx:maxResults}</maxResults>
                        <isShowAvatar>{$ctx:isShowAvatar}</isShowAvatar>
                    </jira.listGroupUserPicker>
                </case>
                <case regex="urn:listGroupPicker">
                    <jira.listGroupPicker>
                        <query>{$ctx:query}</query>
                        <exclude>{$ctx:exclude}</exclude>
                        <maxResults>{$ctx:maxResults}</maxResults>
                    </jira.listGroupPicker>
                </case>
                <case regex="urn:getAttachmentById">
                    <jira.getAttachmentById>
                        <attachmentId>{$ctx:attachmentId}</attachmentId>
                    </jira.getAttachmentById>
                </case>
                <case regex="urn:addVotesForIssue">
                    <jira.addVotesForIssue>
                        <issueId>{$ctx:issueId}</issueId>
                    </jira.addVotesForIssue>
                </case>
                <case regex="urn:getProject">
                    <jira.getProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                        <expand>{$ctx:expand}</expand>
                    </jira.getProject>
                </case>
                <case regex="urn:getComponentsOfProject">
                    <jira.getComponentsOfProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                    </jira.getComponentsOfProject>
                </case>
                <case regex="urn:getAvatarsForProject">
                    <jira.getAvatarsForProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                    </jira.getAvatarsForProject>
                </case>
                <case regex="urn:getRolesOfProject">
                    <jira.getRolesOfProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                    </jira.getRolesOfProject>
                </case>
                <case regex="urn:getStatusesOfProject">
                    <jira.getStatusesOfProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                    </jira.getStatusesOfProject>
                </case>
                <case regex="urn:getVersionsOfProject">
                    <jira.getVersionsOfProject>
                        <projectIdOrKey>{$ctx:projectIdOrKey}</projectIdOrKey>
                    </jira.getVersionsOfProject>
                </case>
                <case regex="urn:getUserPermissions">
                    <jira.getUserPermissions>
                        <projectKey>{$ctx:projectIdOrKey}</projectKey>
                    </jira.getUserPermissions>
                </case>
                <case regex="urn:getDashboards">
                <jira.getDashboards>
                    <maxResults>{$ctx:maxResults}</maxResults>
                    <filter>{$ctx:filter}</filter>
                    <startAt>{$ctx:startAt}</startAt>
                </jira.getDashboards>
                </case>
                <case regex="urn:getIssuePriorities">
                    <jira.getIssuePriorities/>
                </case>
                <case regex="urn:getIssueTypes">
                    <jira.getIssueTypes/>
                </case>
                <case regex="urn:postComment">
                    <jira.postComment>
                        <issueIdOrKey>{$ctx:issueIdOrKey}</issueIdOrKey>
                        <comment>{$ctx:comment}</comment>
                        <visibleRole>{$ctx:visibleRole}</visibleRole>
                        <expand>{$ctx:expand}</expand>
                    </jira.postComment>
                </case>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <log/>
            <send/>
        </outSequence>
    </target>
    <description/>
</proxy>